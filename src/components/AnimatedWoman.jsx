/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/Animated Woman.glb -o src/components/AnimatedWoman.jsx -r public
*/
import { useAnimations, useGLTF, Text, Html } from "@react-three/drei";
import { useFrame, useGraph } from "@react-three/fiber";
import { useAtom } from "jotai";
import React, { useEffect, useMemo, useRef, useState } from "react";
import { SkeletonUtils } from "three-stdlib";
import { socket, userAtom } from "./SocketManager";
import { useGrid } from "../hooks/useGrid";
import * as THREE from "three";
import { useForm } from "react-hook-form";
import { useNavigate } from "react-router-dom";
import { GUI } from "dat.gui";

const MOVEMENT_SPEED = 0.032;

export function AnimatedWoman({
	hairColor = "green",
	topColor = "pink",
	bottomColor = "brown",
	id,
	nickname,
	...props
}) {
	const position = useMemo(() => props.position, []);
	const [path, setPath] = useState();
	const { gridToVector3 } = useGrid();
	const navigate = useNavigate();
	const [hairColors, setHairColors] = useState(null);
	const [topColors, setTopColors] = useState(null);
	const [bottomColors, setBottomColors] = useState(null);

	useEffect(() => {
		const path = [];
		props.path?.forEach((gridPosition) => {
			path.push(gridToVector3(gridPosition));
		});
		setPath(path);
	}, [props.path]);

	const group = useRef();
	const characterRef = useRef();

	const handleGroupClick = (event) => {
		if (id === user) {
			console.log("Group Clicked", event.eventObject);
			// navigate(`/info/${id}`);
			setInteraction(true);
			setAnimation("CharacterArmature|Wave");
			setTimeout(() => {
				setInteraction(false); // 상호작용 끝
				setAnimation("CharacterArmature|Idle"); // 기본 애니메이션으로 복귀
			}, 2000);
		}
	};

	useEffect(() => {
		if (user === id) {
			const gui = new GUI();
			gui
				.add({ nickname }, "nickname")
				.onChange((value) => socket.emit("init", { id, nickname: value }));
			gui
				.add({ hairColor }, "hairColor")
				.onChange((value) => setHairColors(value));
			gui
				.add({ topColor }, "topColor")
				.onChange((value) => setTopColors(value));
			gui
				.add({ bottomColor }, "bottomColor")
				.onChange((value) => setBottomColors(value));

			return () => gui.destroy();
		}
	}, []);

	const { scene, materials, animations } = useGLTF(
		"/models/Animated Woman.glb"
	);
	// Skinned meshes cannot be re-used in threejs without cloning them
	const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
	// useGraph creates two flat object collections for nodes and materials
	const { nodes } = useGraph(clone);

	const { actions } = useAnimations(animations, group);
	const [animation, setAnimation] = useState("CharacterArmature|Idle");
	const [interaction, setInteraction] = useState(false);

	// console.log(actions);

	useEffect(() => {
		actions[animation].reset().fadeIn(0.32).play();
		return () => actions[animation]?.fadeOut(0.32);
	}, [animation]);

	const [user] = useAtom(userAtom);

	useFrame((state) => {
		if (path?.length && group.current.position.distanceTo(path[0]) > 0.1) {
			const direction = group.current.position
				.clone()
				.sub(path[0])
				.normalize()
				.multiplyScalar(MOVEMENT_SPEED);
			group.current.position.sub(direction);
			group.current.lookAt(path[0]);
			if (!interaction) {
				// 상호작용 중이 아닐 때만 run 애니메이션
				setAnimation("CharacterArmature|Run");
			}
		} else if (path.length > 0) {
			setPath(path.slice(1));
		} else if (!interaction) {
			// 상호작용 중이 아닐 때만 idle 애니메이션
			setAnimation("CharacterArmature|Idle");
		}
		if (id === user) {
			state.camera.position.x = group.current.position.x + 8;
			state.camera.position.y = group.current.position.y + 8;
			state.camera.position.z = group.current.position.z + 8;
			state.camera.lookAt(group.current.position);
		}
	});

	return (
		<>
			<group
				ref={group}
				{...props}
				position={position}
				dispose={null}
				name={`character-${id}`}
			>
				<group name="Root_Scene">
					{/* <Center position={new THREE.Vector3(0, 2, 0)}> */}
					<Text
						letterSpacing={0}
						size={0.1}
						color={"black"}
						// font="/Inter_Bold.json"
						fontSize={0.1}
						position={new THREE.Vector3(0, 2, 0)}
						// fillOpacity={0.5}
					>
						{nickname ? nickname : id}
					</Text>
					{/* </Center> */}
					<group name="RootNode" ref={characterRef} onClick={handleGroupClick}>
						<group
							name="CharacterArmature"
							rotation={[-Math.PI / 2, 0, 0]}
							scale={100}
						>
							<primitive object={nodes.Root} />
						</group>
						<group
							name="Casual_Body"
							rotation={[-Math.PI / 2, 0, 0]}
							scale={100}
						>
							<skinnedMesh
								name="Casual_Body_1"
								geometry={nodes.Casual_Body_1.geometry}
								material={materials.White}
								skeleton={nodes.Casual_Body_1.skeleton}
							>
								<meshStandardMaterial
									color={topColors ? topColors : topColor}
								/>
							</skinnedMesh>
							<skinnedMesh
								name="Casual_Body_2"
								geometry={nodes.Casual_Body_2.geometry}
								material={materials.Skin}
								skeleton={nodes.Casual_Body_2.skeleton}
							/>
						</group>
						<group
							name="Casual_Feet"
							rotation={[-Math.PI / 2, 0, 0]}
							scale={100}
						>
							<skinnedMesh
								name="Casual_Feet_1"
								geometry={nodes.Casual_Feet_1.geometry}
								material={materials.Skin}
								skeleton={nodes.Casual_Feet_1.skeleton}
							/>
							<skinnedMesh
								name="Casual_Feet_2"
								geometry={nodes.Casual_Feet_2.geometry}
								material={materials.Grey}
								skeleton={nodes.Casual_Feet_2.skeleton}
							/>
						</group>
						<group
							name="Casual_Head"
							rotation={[-Math.PI / 2, 0, 0]}
							scale={100}
						>
							<skinnedMesh
								name="Casual_Head_1"
								geometry={nodes.Casual_Head_1.geometry}
								material={materials.Skin}
								skeleton={nodes.Casual_Head_1.skeleton}
							/>
							<skinnedMesh
								name="Casual_Head_2"
								geometry={nodes.Casual_Head_2.geometry}
								material={materials.Hair_Blond}
								skeleton={nodes.Casual_Head_2.skeleton}
							>
								<meshStandardMaterial
									color={hairColors ? hairColors : hairColor}
								/>
							</skinnedMesh>
							<skinnedMesh
								name="Casual_Head_3"
								geometry={nodes.Casual_Head_3.geometry}
								material={materials.Hair_Brown}
								skeleton={nodes.Casual_Head_3.skeleton}
							/>
							<skinnedMesh
								name="Casual_Head_4"
								geometry={nodes.Casual_Head_4.geometry}
								material={materials.Brown}
								skeleton={nodes.Casual_Head_4.skeleton}
							/>
						</group>
						<skinnedMesh
							name="Casual_Legs"
							geometry={nodes.Casual_Legs.geometry}
							material={materials.Orange}
							skeleton={nodes.Casual_Legs.skeleton}
							rotation={[-Math.PI / 2, 0, 0]}
							scale={100}
						>
							<meshStandardMaterial
								color={bottomColors ? bottomColors : bottomColor}
							/>
						</skinnedMesh>
					</group>
				</group>
			</group>
		</>
	);
}

useGLTF.preload("/models/Animated Woman.glb");
